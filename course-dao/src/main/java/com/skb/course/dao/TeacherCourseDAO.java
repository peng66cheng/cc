package com.skb.course.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import com.skb.course.domain.TeacherCourseDO;
import com.skb.util.sort.Sortable;

public interface TeacherCourseDAO {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	int deleteByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	int insert(TeacherCourseDO record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	int insertSelective(TeacherCourseDO record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	TeacherCourseDO selectByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	int updateByPrimaryKeySelective(TeacherCourseDO record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table teacher_course
	 *
	 * @mbggenerated
	 */
	int updateByPrimaryKey(TeacherCourseDO record);

	/**
	 * 查询 课程数量
	 * @param teacherId
	 * @param dirId
	 * @param permission  permission 权限 0，公开；1，私有; null, 不限制权限
	 * @return
	 */
	int selectCourseCount(@Param("teacherId") Integer teacherId, @Param("dirId") Integer dirId, @Param("permission") Byte permission);

	/**
	 * 分页查询目录下的文档
	 * 
	 * @param dirId
	 * @param startIndex
	 * @param endIndex
	 * @return
	 */
	List<TeacherCourseDO> selectCourses(
			@Param("teacherId") Integer teacherId, @Param("dirId") Integer dirId,
			@Param("startIndex") Integer startIndex, @Param("endIndex") Integer endIndex);
	
	/**
	 * 获取最新的老师微课
	 * @param teacherId
	 * @param limitNum
	 * @return
	 */
	List<TeacherCourseDO> getLatestTeachCourse(@Param("teacherId") Integer teacherId, @Param("limitNum") Integer limitNum);
	/**
	 * 获取两个课程区间的课程列表(包含边界)
	 * 
	 * @param dirId
	 *            目录Id
	 * @param startOrder
	 *            靠前的顺序， 包含边界
	 * @param endOrder
	 *            靠后的顺序，包含边界
	 * @return
	 */
	List<TeacherCourseDO> getBetweenTeacherCourse(@Param("dirId") Integer dirId,
			@Param("startOrder") Integer startOrder, @Param("endOrder") Integer endOrder);

	/**
	 * 批量修改顺序
	 * 
	 * @param directories
	 * @return
	 */
	int batchModifyOrder(List<Sortable> directories);
	
	/**
	 * 通过课程Id 获取最早使用微课的 老师Id（如果是上传的微课，获取的老师为 上传微课的老师）
	 * @param courseId
	 * @return
	 */
	public int getFirstTeacherIdByCourseId(Integer courseId);
	
}